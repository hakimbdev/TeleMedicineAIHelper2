import { _ as __assign } from '../../chunks/bundle-DseT8u_-.js';
import React__default from 'react';
import { useIIFE } from '@sendbird/uikit-tools';
import { l as isSendableMessage, g as getSuggestedReplies } from '../../chunks/bundle-DBSWrD1e.js';
import { i as isDisabledBecauseFrozen, a as isDisabledBecauseMuted } from '../../chunks/bundle-DDJKNqBp.js';
import { M as MessageView } from '../../chunks/bundle-BBMnSHO3.js';
import { FileViewer } from './FileViewer.js';
import { RemoveMessageModal } from './RemoveMessageModal.js';
import { T as ThreadReplySelectType } from '../../chunks/bundle-0TrdjZtT.js';
import { u as useGroupChannel } from '../../chunks/bundle-N3ga3E1_.js';
import { u as useSendbird } from '../../chunks/bundle-B_GgIa4W.js';
import '@sendbird/chat/groupChannel';
import '../../utils/message/getOutgoingMessageState.js';
import '../../chunks/bundle-D1D0Y4xo.js';
import '../../chunks/bundle-DirGjNLX.js';
import '../../chunks/bundle-C__iJnzl.js';
import '../../chunks/bundle-1qCVlMXW.js';
import '../../chunks/bundle-DT0pStRO.js';
import '../../chunks/bundle-BJzhuBtM.js';
import '../../chunks/bundle-eyKmYzrx.js';
import '../../chunks/bundle-ubX26fzL.js';
import '../../Message/hooks/useDirtyGetMentions.js';
import '../../ui/DateSeparator.js';
import '../../chunks/bundle-CO1y7D0u.js';
import '../../chunks/bundle-fMVQGLVC.js';
import '../../ui/MessageInput.js';
import '../../chunks/bundle-DhyxF0Xw.js';
import '../../ui/IconButton.js';
import '../../ui/Button.js';
import '../../chunks/bundle-4VxKLKl_.js';
import 'dompurify';
import '../../chunks/bundle-C393fElF.js';
import '../../chunks/bundle-DORSLJqP.js';
import '../../chunks/bundle-CT-NzRzq.js';
import '../../ui/Icon.js';
import '../../chunks/bundle-DVYMPV3i.js';
import '../../chunks/bundle-AgGVGhWf.js';
import '../../ui/MessageContent.js';
import '../../chunks/bundle-BUc3HZ08.js';
import '../../ui/Loader.js';
import '../../chunks/bundle-DG9TZERe.js';
import '../../chunks/bundle-DuQ2vnIR.js';
import '../../chunks/bundle-paSqms04.js';
import '../../chunks/bundle-QNHGsSZN.js';
import 'react-dom';
import '@sendbird/chat';
import '@sendbird/chat/openChannel';
import '../../ui/SortByRow.js';
import '../../chunks/bundle-DTKm24fD.js';
import '../../chunks/bundle-CafUCQoC.js';
import '../../ui/MessageItemReactionMenu.js';
import '../../ui/ImageRenderer.js';
import '../../ui/ReactionButton.js';
import '../../chunks/bundle-BWTxQFSl.js';
import '../../chunks/bundle-KhnlGrVI.js';
import '../../ui/EmojiReactions.js';
import '../../ui/ReactionBadge.js';
import '../../ui/BottomSheet.js';
import '../../hooks/useModal.js';
import '../../chunks/bundle-BtliqdNT.js';
import '../../ui/UserListItem.js';
import '../../chunks/bundle-BCWy1eRp.js';
import '../../chunks/bundle-BUm1uq9-.js';
import '../../chunks/bundle-DLAbAE6W.js';
import '../../ui/MutedAvatarOverlay.js';
import '../../ui/Checkbox.js';
import '../../ui/UserProfile.js';
import '../../sendbirdSelectors.js';
import '../../chunks/bundle-LBCBjs9d.js';
import '../../ui/Tooltip.js';
import '../../ui/TooltipWrapper.js';
import '../../Message/context.js';
import '../../chunks/bundle-CBfyMFC9.js';
import '../../ui/AdminMessage.js';
import '../../ui/QuoteMessage.js';
import '../../chunks/bundle-BlbRAJmA.js';
import '@sendbird/chat/message';
import '../../ui/MobileMenu.js';
import '../../ui/ThreadReplies.js';
import '../../chunks/bundle-DH45eb7x.js';
import '../../ui/OGMessageItemBody.js';
import '../../chunks/bundle-DJ_OSSMT.js';
import '../../ui/MentionLabel.js';
import '../../ui/LinkLabel.js';
import '../../ui/TextMessageItemBody.js';
import '../../ui/FileMessageItemBody.js';
import '../../ui/TextButton.js';
import '../../chunks/bundle-DJrybJGG.js';
import '../../ui/FileViewer.js';
import '../../chunks/bundle-CMjQ-cCa.js';
import '../../ui/VoiceMessageItemBody.js';
import '../../ui/ProgressBar.js';
import '../../VoicePlayer/useVoicePlayer.js';
import '../../chunks/bundle-DiCbzkpv.js';
import '../../VoiceRecorder/context.js';
import '../../ui/PlaybackTime.js';
import '../../ui/ThumbnailMessageItemBody.js';
import '../../ui/UnknownMessageItemBody.js';
import '../../ui/TemplateMessageItemBody.js';
import '../../chunks/bundle-MsVmXHII.js';
import '../../ui/FallbackTemplateMessageItemBody.tsx.js';
import '../../ui/LoadingTemplateMessageItemBody.tsx.js';
import '../../ui/MessageFeedbackFailedModal.js';
import '../../ui/FeedbackIconButton.js';
import '../../ui/MobileFeedbackMenu.js';
import '../../ui/MessageFeedbackModal.js';
import '../../ui/Input.js';
import '../../chunks/bundle-ClIzLKH-.js';
import './SuggestedReplies.js';
import '../../chunks/bundle-ClgG8uMn.js';
import '../../chunks/bundle-DF3W2Rb9.js';
import '../../chunks/bundle-C3nEgbrP.js';
import '../../chunks/bundle-B9mN-BTk.js';
import '../../chunks/bundle-BJLoBQCe.js';
import '../../chunks/bundle---aixLy5.js';
import '../../chunks/bundle-CopK-w3W.js';

var Message = function (props) {
    var state = useSendbird().state;
    var config = state.config, emojiManager = state.emojiManager;
    var _a = useGroupChannel(), _b = _a.state, loading = _b.loading, currentChannel = _b.currentChannel, animatedMessageId = _b.animatedMessageId, replyType = _b.replyType, threadReplySelectType = _b.threadReplySelectType, isReactionEnabled = _b.isReactionEnabled, nicknamesMap = _b.nicknamesMap, renderUserMentionItem = _b.renderUserMentionItem, filterEmojiCategoryIds = _b.filterEmojiCategoryIds, onQuoteMessageClick = _b.onQuoteMessageClick, onReplyInThreadClick = _b.onReplyInThreadClick, onMessageAnimated = _b.onMessageAnimated, onBeforeDownloadFileMessage = _b.onBeforeDownloadFileMessage, messages = _b.messages, _c = _a.actions, toggleReaction = _c.toggleReaction, setQuoteMessage = _c.setQuoteMessage, setAnimatedMessageId = _c.setAnimatedMessageId, scrollToMessage = _c.scrollToMessage, updateUserMessage = _c.updateUserMessage, sendUserMessage = _c.sendUserMessage, resendMessage = _c.resendMessage, deleteMessage = _c.deleteMessage;
    var message = props.message;
    var initialized = !loading && Boolean(currentChannel);
    var shouldRenderSuggestedReplies = useIIFE(function () {
        var _a = config.groupChannel, enableSuggestedReplies = _a.enableSuggestedReplies, showSuggestedRepliesFor = _a.showSuggestedRepliesFor;
        // Use `allMessages[allMessages.length - 1]` instead of `currentGroupChannel.lastMessage`
        // because lastMessage is not updated when **Bot** sends messages
        var lastMessageInView = messages[messages.length - 1];
        var hasUnsentMessage = isSendableMessage(lastMessageInView) && (lastMessageInView === null || lastMessageInView === void 0 ? void 0 : lastMessageInView.sendingStatus) !== 'succeeded';
        var showSuggestedReplies = showSuggestedRepliesFor === 'all_messages'
            ? true
            : message.messageId === (lastMessageInView === null || lastMessageInView === void 0 ? void 0 : lastMessageInView.messageId);
        return enableSuggestedReplies && getSuggestedReplies(message).length > 0 && !hasUnsentMessage && showSuggestedReplies;
    });
    return (React__default.createElement(MessageView, __assign({}, props, { channel: currentChannel, emojiContainer: emojiManager === null || emojiManager === void 0 ? void 0 : emojiManager.emojiContainer, editInputDisabled: !initialized
            || isDisabledBecauseFrozen(currentChannel !== null && currentChannel !== void 0 ? currentChannel : undefined)
            || isDisabledBecauseMuted(currentChannel !== null && currentChannel !== void 0 ? currentChannel : undefined)
            || !config.isOnline, shouldRenderSuggestedReplies: shouldRenderSuggestedReplies, isReactionEnabled: isReactionEnabled !== null && isReactionEnabled !== void 0 ? isReactionEnabled : false, replyType: replyType !== null && replyType !== void 0 ? replyType : 'NONE', threadReplySelectType: threadReplySelectType !== null && threadReplySelectType !== void 0 ? threadReplySelectType : ThreadReplySelectType.PARENT, nicknamesMap: nicknamesMap, renderUserMentionItem: renderUserMentionItem, filterEmojiCategoryIds: filterEmojiCategoryIds, scrollToMessage: scrollToMessage, toggleReaction: toggleReaction, setQuoteMessage: setQuoteMessage, onQuoteMessageClick: onQuoteMessageClick, onReplyInThreadClick: onReplyInThreadClick, sendUserMessage: sendUserMessage, updateUserMessage: updateUserMessage, resendMessage: resendMessage, deleteMessage: deleteMessage, animatedMessageId: animatedMessageId, setAnimatedMessageId: setAnimatedMessageId, onMessageAnimated: onMessageAnimated, renderFileViewer: function (props) { return React__default.createElement(FileViewer, __assign({}, props)); }, renderRemoveMessageModal: function (props) { return React__default.createElement(RemoveMessageModal, __assign({}, props)); }, usedInLegacy: false, onBeforeDownloadFileMessage: onBeforeDownloadFileMessage })));
};

export { Message, Message as default };
//# sourceMappingURL=Message.js.map
