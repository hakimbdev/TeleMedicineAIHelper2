import { _ as __assign } from '../../chunks/bundle-DseT8u_-.js';
import React__default from 'react';
import { useChannelContext } from '../context.js';
import { g as getSuggestedReplies } from '../../chunks/bundle-DBSWrD1e.js';
import { b as isDisabledBecauseFrozen, c as isDisabledBecauseMuted } from '../../chunks/bundle-CDYhXWNX.js';
import { M as MessageView } from '../../chunks/bundle-BBMnSHO3.js';
import { FileViewer } from './FileViewer.js';
import RemoveMessageModal from './RemoveMessageModal.js';
import { u as useSendbird } from '../../chunks/bundle-B_GgIa4W.js';
import '../../chunks/bundle-BCWy1eRp.js';
import '../../chunks/bundle-0TrdjZtT.js';
import '../../chunks/bundle-CBfyMFC9.js';
import '../../chunks/bundle-DT0pStRO.js';
import '../../chunks/bundle-C__iJnzl.js';
import '../../chunks/bundle-BJzhuBtM.js';
import '@sendbird/chat/message';
import '../../chunks/bundle-DirGjNLX.js';
import '../../chunks/bundle-BviZJuCc.js';
import '../../chunks/bundle-1qCVlMXW.js';
import '../../chunks/bundle-vbkNCu0L.js';
import '../../chunks/bundle-eyKmYzrx.js';
import '../../chunks/bundle-ubX26fzL.js';
import '@sendbird/chat/groupChannel';
import '../../chunks/bundle-DTKm24fD.js';
import '../../chunks/bundle-d8oeBMu1.js';
import '../../chunks/bundle-LBCBjs9d.js';
import '../../chunks/bundle---aixLy5.js';
import '../../chunks/bundle-HzWL_k--.js';
import '../../utils/message/getOutgoingMessageState.js';
import '../../chunks/bundle-D1D0Y4xo.js';
import '../../chunks/bundle-DDJKNqBp.js';
import '../../Message/hooks/useDirtyGetMentions.js';
import '../../ui/DateSeparator.js';
import '../../chunks/bundle-CO1y7D0u.js';
import '../../chunks/bundle-fMVQGLVC.js';
import '../../ui/MessageInput.js';
import '../../chunks/bundle-DhyxF0Xw.js';
import '../../ui/IconButton.js';
import '../../ui/Button.js';
import '../../chunks/bundle-4VxKLKl_.js';
import 'dompurify';
import '../../chunks/bundle-C393fElF.js';
import '../../chunks/bundle-DORSLJqP.js';
import '../../chunks/bundle-CT-NzRzq.js';
import '../../ui/Icon.js';
import '../../chunks/bundle-DVYMPV3i.js';
import '../../chunks/bundle-AgGVGhWf.js';
import '../../ui/MessageContent.js';
import '../../chunks/bundle-BUc3HZ08.js';
import '../../ui/Loader.js';
import '../../chunks/bundle-DG9TZERe.js';
import '../../chunks/bundle-DuQ2vnIR.js';
import '../../chunks/bundle-paSqms04.js';
import '../../chunks/bundle-QNHGsSZN.js';
import 'react-dom';
import '@sendbird/chat';
import '@sendbird/chat/openChannel';
import '../../ui/SortByRow.js';
import '../../chunks/bundle-CafUCQoC.js';
import '../../ui/MessageItemReactionMenu.js';
import '../../ui/ImageRenderer.js';
import '../../ui/ReactionButton.js';
import '../../chunks/bundle-BWTxQFSl.js';
import '../../chunks/bundle-KhnlGrVI.js';
import '../../ui/EmojiReactions.js';
import '../../ui/ReactionBadge.js';
import '../../ui/BottomSheet.js';
import '../../hooks/useModal.js';
import '../../chunks/bundle-BtliqdNT.js';
import '../../ui/UserListItem.js';
import '../../chunks/bundle-BUm1uq9-.js';
import '../../chunks/bundle-DLAbAE6W.js';
import '../../ui/MutedAvatarOverlay.js';
import '../../ui/Checkbox.js';
import '../../ui/UserProfile.js';
import '../../sendbirdSelectors.js';
import '../../ui/Tooltip.js';
import '../../ui/TooltipWrapper.js';
import '../../Message/context.js';
import '../../ui/AdminMessage.js';
import '../../ui/QuoteMessage.js';
import '../../chunks/bundle-BlbRAJmA.js';
import '../../ui/MobileMenu.js';
import '../../ui/ThreadReplies.js';
import '../../chunks/bundle-DH45eb7x.js';
import '../../ui/OGMessageItemBody.js';
import '../../chunks/bundle-DJ_OSSMT.js';
import '../../ui/MentionLabel.js';
import '../../ui/LinkLabel.js';
import '../../ui/TextMessageItemBody.js';
import '../../ui/FileMessageItemBody.js';
import '../../ui/TextButton.js';
import '../../chunks/bundle-DJrybJGG.js';
import '../../ui/FileViewer.js';
import '../../chunks/bundle-CMjQ-cCa.js';
import '@sendbird/uikit-tools';
import '../../ui/VoiceMessageItemBody.js';
import '../../ui/ProgressBar.js';
import '../../VoicePlayer/useVoicePlayer.js';
import '../../chunks/bundle-DiCbzkpv.js';
import '../../VoiceRecorder/context.js';
import '../../ui/PlaybackTime.js';
import '../../ui/ThumbnailMessageItemBody.js';
import '../../ui/UnknownMessageItemBody.js';
import '../../ui/TemplateMessageItemBody.js';
import '../../chunks/bundle-MsVmXHII.js';
import '../../ui/FallbackTemplateMessageItemBody.tsx.js';
import '../../ui/LoadingTemplateMessageItemBody.tsx.js';
import '../../ui/MessageFeedbackFailedModal.js';
import '../../ui/FeedbackIconButton.js';
import '../../ui/MobileFeedbackMenu.js';
import '../../ui/MessageFeedbackModal.js';
import '../../ui/Input.js';
import '../../chunks/bundle-ClIzLKH-.js';
import '../../GroupChannel/components/SuggestedReplies.js';
import '../../chunks/bundle-ClgG8uMn.js';
import '../../chunks/bundle-DF3W2Rb9.js';
import '../../chunks/bundle-C3nEgbrP.js';
import '../../chunks/bundle-B9mN-BTk.js';

/**
 * @deprecated This component is deprecated and will be removed in the next major update.
 * Please use the `GroupChannel` component from '@sendbird/uikit-react/GroupChannel' instead.
 * For more information, please refer to the migration guide:
 * https://docs.sendbird.com/docs/chat/uikit/v3/react/introduction/group-channel-migration-guide
 */
var Message = function (props) {
    var _a, _b;
    var config = useSendbird().state.config;
    var _c = useChannelContext(), initialized = _c.initialized, currentGroupChannel = _c.currentGroupChannel, animatedMessageId = _c.animatedMessageId, setAnimatedMessageId = _c.setAnimatedMessageId, updateMessage = _c.updateMessage, scrollToMessage = _c.scrollToMessage, replyType = _c.replyType, threadReplySelectType = _c.threadReplySelectType, isReactionEnabled = _c.isReactionEnabled, toggleReaction = _c.toggleReaction, emojiContainer = _c.emojiContainer, nicknamesMap = _c.nicknamesMap, setQuoteMessage = _c.setQuoteMessage, resendMessage = _c.resendMessage, deleteMessage = _c.deleteMessage, renderUserMentionItem = _c.renderUserMentionItem, onReplyInThread = _c.onReplyInThread, onQuoteMessageClick = _c.onQuoteMessageClick, onMessageAnimated = _c.onMessageAnimated, sendMessage = _c.sendMessage, localMessages = _c.localMessages, allMessages = _c.allMessages;
    var message = props.message;
    if (!currentGroupChannel)
        return null;
    return (React__default.createElement(MessageView, __assign({}, props, { channel: currentGroupChannel, emojiContainer: emojiContainer, editInputDisabled: !initialized || isDisabledBecauseFrozen(currentGroupChannel) || isDisabledBecauseMuted(currentGroupChannel) || !config.isOnline, shouldRenderSuggestedReplies: ((_a = config === null || config === void 0 ? void 0 : config.groupChannel) === null || _a === void 0 ? void 0 : _a.enableSuggestedReplies)
            && (((_b = config === null || config === void 0 ? void 0 : config.groupChannel) === null || _b === void 0 ? void 0 : _b.showSuggestedRepliesFor) === 'all_messages'
                ? true
                : message.messageId === allMessages[allMessages.length - 1].messageId
            // Use `allMessages[allMessages.length - 1]` instead of `currentGroupChannel.lastMessage`
            // because lastMessage is not updated when **Bot** sends messages
            )
            // the options should appear only when there's no failed or pending messages
            && (localMessages === null || localMessages === void 0 ? void 0 : localMessages.length) === 0
            && getSuggestedReplies(message).length > 0, isReactionEnabled: isReactionEnabled, replyType: replyType, threadReplySelectType: threadReplySelectType, nicknamesMap: nicknamesMap, renderUserMentionItem: renderUserMentionItem, scrollToMessage: scrollToMessage, toggleReaction: toggleReaction, setQuoteMessage: setQuoteMessage, onQuoteMessageClick: onQuoteMessageClick, onReplyInThreadClick: onReplyInThread, sendUserMessage: function (params) {
            sendMessage({
                message: params.message,
                mentionedUsers: params.mentionedUsers,
                mentionTemplate: params.mentionedMessageTemplate,
            });
        }, updateUserMessage: function (messageId, params) {
            var _a;
            updateMessage({
                messageId: messageId,
                message: (_a = params.message) !== null && _a !== void 0 ? _a : '',
                mentionedUsers: params.mentionedUsers,
                mentionTemplate: params.mentionedMessageTemplate,
            });
        }, resendMessage: resendMessage, deleteMessage: deleteMessage, animatedMessageId: animatedMessageId, setAnimatedMessageId: setAnimatedMessageId, onMessageAnimated: onMessageAnimated, renderFileViewer: function (props) { return React__default.createElement(FileViewer, __assign({}, props)); }, renderRemoveMessageModal: function (props) { return React__default.createElement(RemoveMessageModal, __assign({}, props)); } })));
};

export { Message as default };
//# sourceMappingURL=Message.js.map
